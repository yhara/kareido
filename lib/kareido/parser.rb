#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.14
# from Racc grammer file "".
#

require 'racc/parser.rb'

require 'strscan'

module Kareido
  class Parser < Racc::Parser

module_eval(<<'...end parser.ry/module_eval...', 'parser.ry', 108)
KEYWORDS = /func|if|for|extern/

SYMBOLS = /[(){},.+-*\/%=]/

def parse(str)
  @yydebug = true

  @q = []
  s = StringScanner.new(str)
  until s.empty?
    case
    when s.scan(/\s+/)
      # skip whitespace
    when s.scan(%r{//.*\n})
      # skip comment
    when m = s.scan(SYMBOLS)
      @q << [m, nil]
    when m = s.scan(/\d+(\.\d+)?/)
      @q << [:NUMBER, m.to_f]
    when m = s.scan(KEYWORDS)
      @q << [m, m.to_sym]
    when m = s.scan(/\w+/)
      @q << [:IDENT, m]
    else
      raise "no match: #{s.inspect}"
    end
  end

  do_parse
end

def next_token
  @q.shift
end
...end parser.ry/module_eval...
##### State transition tables begin ###

racc_action_table = [
    33,    33,    33,    17,    14,     7,     7,    15,    31,    31,
    31,     8,     8,    17,    17,    21,    22,    23,    24,    13,
    12,    34,    11,    36,    33,    38,    39,     9,    41,    43,
    44,    33,    46 ]

racc_action_check = [
    24,    39,    29,    22,    11,     5,     0,    12,    24,    39,
    29,     5,     0,    14,    15,    16,    18,    20,    21,     9,
     8,    26,     7,    31,    36,    37,    38,     1,    40,    41,
    43,    44,    45 ]

racc_action_pointer = [
     2,    27,   nil,   nil,   nil,     1,   nil,    20,    18,    19,
   nil,    -1,     2,   nil,    11,    12,     9,   nil,     7,   nil,
    11,    11,     1,   nil,    -3,   nil,    13,   nil,   nil,    -1,
   nil,    18,   nil,   nil,   nil,   nil,    21,    19,    19,    -2,
    20,    17,   nil,    23,    28,    24,   nil ]

racc_action_default = [
    -4,   -30,    -1,    -2,    -3,    -5,    -6,   -30,   -30,   -30,
    -7,   -30,   -30,    47,   -10,   -10,   -30,    -9,   -11,   -12,
   -30,   -30,   -30,   -14,   -17,   -13,   -30,   -15,   -16,   -18,
   -19,   -30,   -24,   -29,    -8,   -20,   -30,   -30,   -30,   -17,
   -30,   -22,   -21,   -30,   -30,   -30,   -23 ]

racc_goto_table = [
    26,    37,     6,    16,    20,     1,     5,    10,    25,    45,
    35,     2,    42,   nil,   nil,    40 ]

racc_goto_check = [
     8,    13,     3,     7,     7,     1,     6,     3,     9,    13,
    11,     2,    15,   nil,   nil,     8 ]

racc_goto_pointer = [
   nil,     5,    11,     2,   nil,   nil,     6,   -11,   -24,   -14,
   nil,   -19,   nil,   -35,   nil,   -29,   nil,   nil,   nil ]

racc_goto_default = [
   nil,   nil,   nil,   nil,     3,     4,   nil,   nil,   nil,    19,
    18,    30,    27,    28,    29,   nil,    32,   nil,   nil ]

racc_reduce_table = [
  0, 0, :racc_error,
  1, 14, :_reduce_1,
  1, 16, :_reduce_none,
  1, 16, :_reduce_none,
  0, 15, :_reduce_4,
  1, 15, :_reduce_5,
  1, 19, :_reduce_6,
  2, 19, :_reduce_7,
  8, 17, :_reduce_8,
  1, 22, :_reduce_none,
  0, 20, :_reduce_10,
  1, 20, :_reduce_11,
  1, 23, :_reduce_12,
  3, 23, :_reduce_13,
  5, 18, :_reduce_14,
  1, 24, :_reduce_none,
  1, 24, :_reduce_none,
  0, 21, :_reduce_17,
  1, 21, :_reduce_18,
  1, 27, :_reduce_19,
  2, 27, :_reduce_20,
  8, 25, :_reduce_21,
  0, 28, :_reduce_22,
  4, 28, :_reduce_23,
  1, 26, :_reduce_none,
  0, 30, :_reduce_25,
  1, 30, :_reduce_26,
  1, 31, :_reduce_27,
  2, 31, :_reduce_28,
  1, 29, :_reduce_none ]

racc_reduce_n = 30

racc_shift_n = 47

racc_token_table = {
  false => 0,
  :error => 1,
  :IDENT => 2,
  :NUMBER => 3,
  "func" => 4,
  "(" => 5,
  ")" => 6,
  "{" => 7,
  "}" => 8,
  "," => 9,
  "extern" => 10,
  "if" => 11,
  "else" => 12 }

racc_nt_base = 13

racc_use_result_var = false

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "IDENT",
  "NUMBER",
  "\"func\"",
  "\"(\"",
  "\")\"",
  "\"{\"",
  "\"}\"",
  "\",\"",
  "\"extern\"",
  "\"if\"",
  "\"else\"",
  "$start",
  "program",
  "opt_definitions",
  "definition",
  "defun",
  "extern",
  "definitions",
  "opt_params",
  "opt_statements",
  "param",
  "params",
  "statement",
  "if_stmt",
  "expression",
  "statements",
  "opt_else",
  "literal",
  "opt_expressions",
  "expressions" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

module_eval(<<'.,.,', 'parser.ry', 8)
  def _reduce_1(val, _values)
     Ast::Program.new(val[0]) 
  end
.,.,

# reduce 2 omitted

# reduce 3 omitted

module_eval(<<'.,.,', 'parser.ry', 15)
  def _reduce_4(val, _values)
     [] 
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 17)
  def _reduce_5(val, _values)
     val[0] 
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 21)
  def _reduce_6(val, _values)
     [val[0]] 
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 23)
  def _reduce_7(val, _values)
     val[0].push(val[1]) 
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 31)
  def _reduce_8(val, _values)
     Ast::Defun.new(val[1], val[3], val[6]) 
  end
.,.,

# reduce 9 omitted

module_eval(<<'.,.,', 'parser.ry', 37)
  def _reduce_10(val, _values)
     [] 
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 39)
  def _reduce_11(val, _values)
     val[0] 
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 43)
  def _reduce_12(val, _values)
     [val[0]] 
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 45)
  def _reduce_13(val, _values)
     val[0].push(val[1]) 
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 51)
  def _reduce_14(val, _values)
     Ast::Extern.new(val[1], val[3]) 
  end
.,.,

# reduce 15 omitted

# reduce 16 omitted

module_eval(<<'.,.,', 'parser.ry', 58)
  def _reduce_17(val, _values)
     [] 
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 60)
  def _reduce_18(val, _values)
     val[0] 
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 64)
  def _reduce_19(val, _values)
     [val[0]] 
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 66)
  def _reduce_20(val, _values)
     val[0].push(val[1]) 
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 75)
  def _reduce_21(val, _values)
     Ast::If.new(val[2], val[5], val[7]) 
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 79)
  def _reduce_22(val, _values)
     nil 
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 81)
  def _reduce_23(val, _values)
     val[2] 
  end
.,.,

# reduce 24 omitted

module_eval(<<'.,.,', 'parser.ry', 87)
  def _reduce_25(val, _values)
     [] 
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 89)
  def _reduce_26(val, _values)
     val[0] 
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 93)
  def _reduce_27(val, _values)
     [val[0]] 
  end
.,.,

module_eval(<<'.,.,', 'parser.ry', 95)
  def _reduce_28(val, _values)
     val[0].push(val[1]) 
  end
.,.,

# reduce 29 omitted

def _reduce_none(val, _values)
  val[0]
end

  end   # class Parser
  end   # module Kareido
